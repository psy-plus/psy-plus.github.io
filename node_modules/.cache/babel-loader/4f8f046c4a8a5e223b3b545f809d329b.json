{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { shallowRef, watch, toRaw } from 'vue';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _extends({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, simpleMode) {\n  var mergedTreeData = shallowRef();\n  watch([simpleMode, treeData, children], function () {\n    var simpleModeValue = simpleMode.value;\n\n    if (treeData.value) {\n      mergedTreeData.value = simpleMode.value ? parseSimpleTreeData(toRaw(treeData.value), _extends({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleModeValue !== true ? simpleModeValue : {})) : toRaw(treeData.value).slice();\n    } else {\n      mergedTreeData.value = convertChildrenToData(toRaw(children.value));\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return mergedTreeData;\n}","map":{"version":3,"names":["_extends","shallowRef","watch","toRaw","convertChildrenToData","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","key","forEach","parentKey","parent","children","push","useTreeData","simpleMode","mergedTreeData","simpleModeValue","value","slice","immediate","deep"],"sources":["/Users/cinder/Desktop/psyplusweb/node_modules/ant-design-vue/es/vc-tree-select/hooks/useTreeData.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { shallowRef, watch, toRaw } from 'vue';\nimport { convertChildrenToData } from '../utils/legacyUtil';\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _extends({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, simpleMode) {\n  var mergedTreeData = shallowRef();\n  watch([simpleMode, treeData, children], function () {\n    var simpleModeValue = simpleMode.value;\n\n    if (treeData.value) {\n      mergedTreeData.value = simpleMode.value ? parseSimpleTreeData(toRaw(treeData.value), _extends({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleModeValue !== true ? simpleModeValue : {})) : toRaw(treeData.value).slice();\n    } else {\n      mergedTreeData.value = convertChildrenToData(toRaw(children.value));\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return mergedTreeData;\n}"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,KAA5B,QAAyC,KAAzC;AACA,SAASC,qBAAT,QAAsC,qBAAtC;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,IAAvC,EAA6C;EAC3C,IAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;EAAA,IACIC,GAAG,GAAGF,IAAI,CAACE,GADf;EAAA,IAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;EAGA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,YAAY,GAAG,EAAnB,CAL2C,CAKpB;;EAEvB,IAAIC,QAAQ,GAAGP,QAAQ,CAACQ,GAAT,CAAa,UAAUC,IAAV,EAAgB;IAC1C,IAAIC,KAAK,GAAGhB,QAAQ,CAAC,EAAD,EAAKe,IAAL,CAApB;;IAEA,IAAIE,GAAG,GAAGD,KAAK,CAACR,EAAD,CAAf;IACAG,QAAQ,CAACM,GAAD,CAAR,GAAgBD,KAAhB;IACAA,KAAK,CAACC,GAAN,GAAYD,KAAK,CAACC,GAAN,IAAaA,GAAzB;IACA,OAAOD,KAAP;EACD,CAPc,CAAf,CAP2C,CAcvC;;EAEJH,QAAQ,CAACK,OAAT,CAAiB,UAAUH,IAAV,EAAgB;IAC/B,IAAII,SAAS,GAAGJ,IAAI,CAACN,GAAD,CAApB;IACA,IAAIW,MAAM,GAAGT,QAAQ,CAACQ,SAAD,CAArB,CAF+B,CAEG;;IAElC,IAAIC,MAAJ,EAAY;MACVA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACC,QAAP,IAAmB,EAArC;MACAD,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBP,IAArB;IACD,CAP8B,CAO7B;;;IAGF,IAAII,SAAS,KAAKT,OAAd,IAAyB,CAACU,MAAD,IAAWV,OAAO,KAAK,IAApD,EAA0D;MACxDE,YAAY,CAACU,IAAb,CAAkBP,IAAlB;IACD;EACF,CAbD;EAcA,OAAOH,YAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,eAAe,SAASW,WAAT,CAAqBjB,QAArB,EAA+Be,QAA/B,EAAyCG,UAAzC,EAAqD;EAClE,IAAIC,cAAc,GAAGxB,UAAU,EAA/B;EACAC,KAAK,CAAC,CAACsB,UAAD,EAAalB,QAAb,EAAuBe,QAAvB,CAAD,EAAmC,YAAY;IAClD,IAAIK,eAAe,GAAGF,UAAU,CAACG,KAAjC;;IAEA,IAAIrB,QAAQ,CAACqB,KAAb,EAAoB;MAClBF,cAAc,CAACE,KAAf,GAAuBH,UAAU,CAACG,KAAX,GAAmBtB,mBAAmB,CAACF,KAAK,CAACG,QAAQ,CAACqB,KAAV,CAAN,EAAwB3B,QAAQ,CAAC;QAC5FQ,EAAE,EAAE,IADwF;QAE5FC,GAAG,EAAE,KAFuF;QAG5FC,OAAO,EAAE;MAHmF,CAAD,EAI1FgB,eAAe,KAAK,IAApB,GAA2BA,eAA3B,GAA6C,EAJ6C,CAAhC,CAAtC,GAIgCvB,KAAK,CAACG,QAAQ,CAACqB,KAAV,CAAL,CAAsBC,KAAtB,EAJvD;IAKD,CAND,MAMO;MACLH,cAAc,CAACE,KAAf,GAAuBvB,qBAAqB,CAACD,KAAK,CAACkB,QAAQ,CAACM,KAAV,CAAN,CAA5C;IACD;EACF,CAZI,EAYF;IACDE,SAAS,EAAE,IADV;IAEDC,IAAI,EAAE;EAFL,CAZE,CAAL;EAgBA,OAAOL,cAAP;AACD"},"metadata":{},"sourceType":"module"}