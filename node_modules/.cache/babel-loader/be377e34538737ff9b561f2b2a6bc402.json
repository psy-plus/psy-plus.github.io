{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useFrame from './hooks/useFrame';\nimport { watch, computed, ref, defineComponent } from 'vue';\nimport KeyCode from '../../_util/KeyCode';\nimport classNames from '../../_util/classNames';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nexport var inputNumberProps = function inputNumberProps() {\n  return {\n    /** value will show as string */\n    stringMode: {\n      type: Boolean\n    },\n    defaultValue: {\n      type: [String, Number]\n    },\n    value: {\n      type: [String, Number]\n    },\n    prefixCls: {\n      type: String\n    },\n    min: {\n      type: [String, Number]\n    },\n    max: {\n      type: [String, Number]\n    },\n    step: {\n      type: [String, Number],\n      default: 1\n    },\n    tabindex: {\n      type: Number\n    },\n    controls: {\n      type: Boolean,\n      default: true\n    },\n    readonly: {\n      type: Boolean\n    },\n    disabled: {\n      type: Boolean\n    },\n    autofocus: {\n      type: Boolean\n    },\n    keyboard: {\n      type: Boolean,\n      default: true\n    },\n\n    /** Parse display value to validate number */\n    parser: {\n      type: Function\n    },\n\n    /** Transform `value` to display value show in input */\n    formatter: {\n      type: Function\n    },\n\n    /** Syntactic sugar of `formatter`. Config precision of display. */\n    precision: {\n      type: Number\n    },\n\n    /** Syntactic sugar of `formatter`. Config decimal separator of display. */\n    decimalSeparator: {\n      type: String\n    },\n    onInput: {\n      type: Function\n    },\n    onChange: {\n      type: Function\n    },\n    onPressEnter: {\n      type: Function\n    },\n    onStep: {\n      type: Function\n    },\n    onBlur: {\n      type: Function\n    },\n    onFocus: {\n      type: Function\n    }\n  };\n};\nexport default defineComponent({\n  name: 'InnerInputNumber',\n  inheritAttrs: false,\n  props: _extends(_extends({}, inputNumberProps()), {\n    lazy: Boolean\n  }),\n  slots: ['upHandler', 'downHandler'],\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        slots = _ref.slots,\n        emit = _ref.emit,\n        expose = _ref.expose;\n    var inputRef = ref();\n    var focus = ref(false);\n    var userTypingRef = ref(false);\n    var compositionRef = ref(false);\n    var decimalValue = ref(getMiniDecimal(props.value));\n\n    function setUncontrolledDecimalValue(newDecimal) {\n      if (props.value === undefined) {\n        decimalValue.value = newDecimal;\n      }\n    } // ====================== Parser & Formatter ======================\n\n    /**\n     * `precision` is used for formatter & onChange.\n     * It will auto generate by `value` & `step`.\n     * But it will not block user typing.\n     *\n     * Note: Auto generate `precision` is used for legacy logic.\n     * We should remove this since we already support high precision with BigInt.\n     *\n     * @param number  Provide which number should calculate precision\n     * @param userTyping  Change by user typing\n     */\n\n\n    var getPrecision = function getPrecision(numStr, userTyping) {\n      if (userTyping) {\n        return undefined;\n      }\n\n      if (props.precision >= 0) {\n        return props.precision;\n      }\n\n      return Math.max(getNumberPrecision(numStr), getNumberPrecision(props.step));\n    }; // >>> Parser\n\n\n    var mergedParser = function mergedParser(num) {\n      var numStr = String(num);\n\n      if (props.parser) {\n        return props.parser(numStr);\n      }\n\n      var parsedStr = numStr;\n\n      if (props.decimalSeparator) {\n        parsedStr = parsedStr.replace(props.decimalSeparator, '.');\n      } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n      return parsedStr.replace(/[^\\w.-]+/g, '');\n    }; // >>> Formatter\n\n\n    var inputValue = ref('');\n\n    var mergedFormatter = function mergedFormatter(number, userTyping) {\n      if (props.formatter) {\n        return props.formatter(number, {\n          userTyping: userTyping,\n          input: String(inputValue.value)\n        });\n      }\n\n      var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n      if (!userTyping) {\n        var mergedPrecision = getPrecision(str, userTyping);\n\n        if (validateNumber(str) && (props.decimalSeparator || mergedPrecision >= 0)) {\n          // Separator\n          var separatorStr = props.decimalSeparator || '.';\n          str = toFixed(str, separatorStr, mergedPrecision);\n        }\n      }\n\n      return str;\n    }; // ========================== InputValue ==========================\n\n    /**\n     * Input text value control\n     *\n     * User can not update input content directly. It update with follow rules by priority:\n     *  1. controlled `value` changed\n     *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n     *  2. User typing with format (not precision)\n     *  3. Blur or Enter trigger revalidate\n     */\n\n\n    var initValue = function () {\n      var initValue = props.value;\n\n      if (decimalValue.value.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n        return Number.isNaN(initValue) ? '' : initValue;\n      }\n\n      return mergedFormatter(decimalValue.value.toString(), false);\n    }();\n\n    inputValue.value = initValue; // Should always be string\n\n    function setInputValue(newValue, userTyping) {\n      inputValue.value = mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n      // Otherwise is controlled by internal interactive logic which check by userTyping\n      // You can ref 'show limited value when input is not focused' test for more info.\n      newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping);\n    } // >>> Max & Min limit\n\n\n    var maxDecimal = computed(function () {\n      return getDecimalIfValidate(props.max);\n    });\n    var minDecimal = computed(function () {\n      return getDecimalIfValidate(props.min);\n    });\n    var upDisabled = computed(function () {\n      if (!maxDecimal.value || !decimalValue.value || decimalValue.value.isInvalidate()) {\n        return false;\n      }\n\n      return maxDecimal.value.lessEquals(decimalValue.value);\n    });\n    var downDisabled = computed(function () {\n      if (!minDecimal.value || !decimalValue.value || decimalValue.value.isInvalidate()) {\n        return false;\n      }\n\n      return decimalValue.value.lessEquals(minDecimal.value);\n    }); // Cursor controller\n\n    var _useCursor = useCursor(inputRef, focus),\n        _useCursor2 = _slicedToArray(_useCursor, 2),\n        recordCursor = _useCursor2[0],\n        restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n    /**\n     * Find target value closet within range.\n     * e.g. [11, 28]:\n     *    3  => 11\n     *    23 => 23\n     *    99 => 28\n     */\n\n\n    var getRangeValue = function getRangeValue(target) {\n      // target > max\n      if (maxDecimal.value && !target.lessEquals(maxDecimal.value)) {\n        return maxDecimal.value;\n      } // target < min\n\n\n      if (minDecimal.value && !minDecimal.value.lessEquals(target)) {\n        return minDecimal.value;\n      }\n\n      return null;\n    };\n    /**\n     * Check value is in [min, max] range\n     */\n\n\n    var isInRange = function isInRange(target) {\n      return !getRangeValue(target);\n    };\n    /**\n     * Trigger `onChange` if value validated and not equals of origin.\n     * Return the value that re-align in range.\n     */\n\n\n    var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n      var _a;\n\n      var updateValue = newValue;\n      var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n      // We just trigger onChange(null)\n      // This should not block user typing\n\n      if (!updateValue.isEmpty() && !userTyping) {\n        // Revert value in range if needed\n        updateValue = getRangeValue(updateValue) || updateValue;\n        isRangeValidate = true;\n      }\n\n      if (!props.readonly && !props.disabled && isRangeValidate) {\n        var numStr = updateValue.toString();\n        var mergedPrecision = getPrecision(numStr, userTyping);\n\n        if (mergedPrecision >= 0) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n        } // Trigger event\n\n\n        if (!updateValue.equals(decimalValue.value)) {\n          setUncontrolledDecimalValue(updateValue);\n          (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, updateValue.isEmpty() ? null : getDecimalValue(props.stringMode, updateValue)); // Reformat input if value is not controlled\n\n          if (props.value === undefined) {\n            setInputValue(updateValue, userTyping);\n          }\n        }\n\n        return updateValue;\n      }\n\n      return decimalValue.value;\n    }; // ========================== User Input ==========================\n\n\n    var onNextPromise = useFrame(); // >>> Collect input value\n\n    var collectInputValue = function collectInputValue(inputStr) {\n      var _a;\n\n      recordCursor(); // Update inputValue incase input can not parse as number\n\n      inputValue.value = inputStr; // Parse number\n\n      if (!compositionRef.value) {\n        var finalValue = mergedParser(inputStr);\n        var finalDecimal = getMiniDecimal(finalValue);\n\n        if (!finalDecimal.isNaN()) {\n          triggerValueUpdate(finalDecimal, true);\n        }\n      } // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n\n      (_a = props.onInput) === null || _a === void 0 ? void 0 : _a.call(props, inputStr); // optimize for chinese input experience\n      // https://github.com/ant-design/ant-design/issues/8196\n\n      onNextPromise(function () {\n        var nextInputStr = inputStr;\n\n        if (!props.parser) {\n          nextInputStr = inputStr.replace(/。/g, '.');\n        }\n\n        if (nextInputStr !== inputStr) {\n          collectInputValue(nextInputStr);\n        }\n      });\n    }; // >>> Composition\n\n\n    var onCompositionStart = function onCompositionStart() {\n      compositionRef.value = true;\n    };\n\n    var onCompositionEnd = function onCompositionEnd() {\n      compositionRef.value = false;\n      collectInputValue(inputRef.value.value);\n    }; // >>> Input\n\n\n    var onInternalInput = function onInternalInput(e) {\n      collectInputValue(e.target.value);\n    }; // ============================= Step =============================\n\n\n    var onInternalStep = function onInternalStep(up) {\n      var _a, _b; // Ignore step since out of range\n\n\n      if (up && upDisabled.value || !up && downDisabled.value) {\n        return;\n      } // Clear typing status since it may caused by up & down key.\n      // We should sync with input value.\n\n\n      userTypingRef.value = false;\n      var stepDecimal = getMiniDecimal(props.step);\n\n      if (!up) {\n        stepDecimal = stepDecimal.negate();\n      }\n\n      var target = (decimalValue.value || getMiniDecimal(0)).add(stepDecimal.toString());\n      var updatedValue = triggerValueUpdate(target, false);\n      (_a = props.onStep) === null || _a === void 0 ? void 0 : _a.call(props, getDecimalValue(props.stringMode, updatedValue), {\n        offset: props.step,\n        type: up ? 'up' : 'down'\n      });\n      (_b = inputRef.value) === null || _b === void 0 ? void 0 : _b.focus();\n    }; // ============================ Flush =============================\n\n    /**\n     * Flush current input content to trigger value change & re-formatter input if needed\n     */\n\n\n    var flushInputValue = function flushInputValue(userTyping) {\n      var parsedValue = getMiniDecimal(mergedParser(inputValue.value));\n      var formatValue = parsedValue;\n\n      if (!parsedValue.isNaN()) {\n        // Only validate value or empty value can be re-fill to inputValue\n        // Reassign the formatValue within ranged of trigger control\n        formatValue = triggerValueUpdate(parsedValue, userTyping);\n      } else {\n        formatValue = decimalValue.value;\n      }\n\n      if (props.value !== undefined) {\n        // Reset back with controlled value first\n        setInputValue(decimalValue.value, false);\n      } else if (!formatValue.isNaN()) {\n        // Reset input back since no validate value\n        setInputValue(formatValue, false);\n      }\n    };\n\n    var onKeyDown = function onKeyDown(event) {\n      var _a;\n\n      var which = event.which;\n      userTypingRef.value = true;\n\n      if (which === KeyCode.ENTER) {\n        if (!compositionRef.value) {\n          userTypingRef.value = false;\n        }\n\n        flushInputValue(false);\n        (_a = props.onPressEnter) === null || _a === void 0 ? void 0 : _a.call(props, event);\n      }\n\n      if (props.keyboard === false) {\n        return;\n      } // Do step\n\n\n      if (!compositionRef.value && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n        onInternalStep(KeyCode.UP === which);\n        event.preventDefault();\n      }\n    };\n\n    var onKeyUp = function onKeyUp() {\n      userTypingRef.value = false;\n    }; // >>> Focus & Blur\n\n\n    var onBlur = function onBlur(e) {\n      flushInputValue(false);\n      focus.value = false;\n      userTypingRef.value = false;\n      emit('blur', e);\n    }; // ========================== Controlled ==========================\n    // Input by precision\n\n\n    watch(function () {\n      return props.precision;\n    }, function () {\n      if (!decimalValue.value.isInvalidate()) {\n        setInputValue(decimalValue.value, false);\n      }\n    }, {\n      flush: 'post'\n    }); // Input by value\n\n    watch(function () {\n      return props.value;\n    }, function () {\n      var newValue = getMiniDecimal(props.value);\n      decimalValue.value = newValue;\n      var currentParsedValue = getMiniDecimal(mergedParser(inputValue.value)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n      // But let it go if user set `formatter`\n\n      if (!newValue.equals(currentParsedValue) || !userTypingRef.value || props.formatter) {\n        // Update value as effect\n        setInputValue(newValue, userTypingRef.value);\n      }\n    }, {\n      flush: 'post'\n    }); // ============================ Cursor ============================\n\n    watch(inputValue, function () {\n      if (props.formatter) {\n        restoreCursor();\n      }\n    }, {\n      flush: 'post'\n    });\n    watch(function () {\n      return props.disabled;\n    }, function (val) {\n      if (val) {\n        focus.value = false;\n      }\n    });\n    expose({\n      focus: function focus() {\n        var _a;\n\n        (_a = inputRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: function blur() {\n        var _a;\n\n        (_a = inputRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    });\n    return function () {\n      var _classNames;\n\n      var _a = _extends(_extends({}, attrs), props),\n          _a$prefixCls = _a.prefixCls,\n          prefixCls = _a$prefixCls === void 0 ? 'rc-input-number' : _a$prefixCls,\n          min = _a.min,\n          max = _a.max,\n          _a$step = _a.step,\n          step = _a$step === void 0 ? 1 : _a$step,\n          defaultValue = _a.defaultValue,\n          value = _a.value,\n          disabled = _a.disabled,\n          readonly = _a.readonly,\n          keyboard = _a.keyboard,\n          _a$controls = _a.controls,\n          controls = _a$controls === void 0 ? true : _a$controls,\n          autofocus = _a.autofocus,\n          stringMode = _a.stringMode,\n          parser = _a.parser,\n          formatter = _a.formatter,\n          precision = _a.precision,\n          decimalSeparator = _a.decimalSeparator,\n          onChange = _a.onChange,\n          onInput = _a.onInput,\n          onPressEnter = _a.onPressEnter,\n          onStep = _a.onStep,\n          lazy = _a.lazy,\n          className = _a.class,\n          style = _a.style,\n          inputProps = __rest(_a, [\"prefixCls\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readonly\", \"keyboard\", \"controls\", \"autofocus\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\", \"lazy\", \"class\", \"style\"]);\n\n      var upHandler = slots.upHandler,\n          downHandler = slots.downHandler;\n      var inputClassName = \"\".concat(prefixCls, \"-input\");\n      var eventProps = {};\n\n      if (lazy) {\n        eventProps.onChange = onInternalInput;\n      } else {\n        eventProps.onInput = onInternalInput;\n      }\n\n      return _createVNode(\"div\", {\n        \"class\": classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus.value), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readonly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.value.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.value.isInvalidate() && !isInRange(decimalValue.value)), _classNames)),\n        \"style\": style,\n        \"onKeydown\": onKeyDown,\n        \"onKeyup\": onKeyUp\n      }, [controls && _createVNode(StepHandler, {\n        \"prefixCls\": prefixCls,\n        \"upDisabled\": upDisabled.value,\n        \"downDisabled\": downDisabled.value,\n        \"onStep\": onInternalStep\n      }, {\n        upNode: upHandler,\n        downNode: downHandler\n      }), _createVNode(\"div\", {\n        \"class\": \"\".concat(inputClassName, \"-wrap\")\n      }, [_createVNode(\"input\", _objectSpread(_objectSpread(_objectSpread({\n        \"autofocus\": autofocus,\n        \"autocomplete\": \"off\",\n        \"role\": \"spinbutton\",\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": decimalValue.value.isInvalidate() ? null : decimalValue.value.toString(),\n        \"step\": step\n      }, inputProps), {}, {\n        \"ref\": inputRef,\n        \"class\": inputClassName,\n        \"value\": inputValue.value,\n        \"disabled\": disabled,\n        \"readonly\": readonly,\n        \"onFocus\": function onFocus(e) {\n          focus.value = true;\n          emit('focus', e);\n        }\n      }, eventProps), {}, {\n        \"onBlur\": onBlur,\n        \"onCompositionstart\": onCompositionStart,\n        \"onCompositionend\": onCompositionEnd\n      }), null)])]);\n    };\n  }\n});","map":{"version":3,"names":["_objectSpread","_defineProperty","_slicedToArray","_typeof","_extends","createVNode","_createVNode","resolveDirective","_resolveDirective","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","getMiniDecimal","toFixed","StepHandler","getNumberPrecision","num2str","validateNumber","useCursor","useFrame","watch","computed","ref","defineComponent","KeyCode","classNames","getDecimalValue","stringMode","decimalValue","isEmpty","toString","toNumber","getDecimalIfValidate","value","decimal","isInvalidate","inputNumberProps","type","Boolean","defaultValue","String","Number","prefixCls","min","max","step","default","tabindex","controls","readonly","disabled","autofocus","keyboard","parser","Function","formatter","precision","decimalSeparator","onInput","onChange","onPressEnter","onStep","onBlur","onFocus","name","inheritAttrs","props","lazy","slots","setup","_ref","attrs","emit","expose","inputRef","focus","userTypingRef","compositionRef","setUncontrolledDecimalValue","newDecimal","undefined","getPrecision","numStr","userTyping","Math","mergedParser","num","parsedStr","replace","inputValue","mergedFormatter","number","input","str","mergedPrecision","separatorStr","initValue","includes","isNaN","setInputValue","newValue","maxDecimal","minDecimal","upDisabled","lessEquals","downDisabled","_useCursor","_useCursor2","recordCursor","restoreCursor","getRangeValue","target","isInRange","triggerValueUpdate","_a","updateValue","isRangeValidate","equals","onNextPromise","collectInputValue","inputStr","finalValue","finalDecimal","nextInputStr","onCompositionStart","onCompositionEnd","onInternalInput","onInternalStep","up","_b","stepDecimal","negate","add","updatedValue","offset","flushInputValue","parsedValue","formatValue","onKeyDown","event","which","ENTER","UP","DOWN","preventDefault","onKeyUp","flush","currentParsedValue","val","blur","_classNames","_a$prefixCls","_a$step","_a$controls","className","class","style","inputProps","upHandler","downHandler","inputClassName","concat","eventProps","upNode","downNode"],"sources":["/Users/cinder/Desktop/Psy+/psyplusweb/node_modules/ant-design-vue/es/input-number/src/InputNumber.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useFrame from './hooks/useFrame';\nimport { watch, computed, ref, defineComponent } from 'vue';\nimport KeyCode from '../../_util/KeyCode';\nimport classNames from '../../_util/classNames';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nexport var inputNumberProps = function inputNumberProps() {\n  return {\n    /** value will show as string */\n    stringMode: {\n      type: Boolean\n    },\n    defaultValue: {\n      type: [String, Number]\n    },\n    value: {\n      type: [String, Number]\n    },\n    prefixCls: {\n      type: String\n    },\n    min: {\n      type: [String, Number]\n    },\n    max: {\n      type: [String, Number]\n    },\n    step: {\n      type: [String, Number],\n      default: 1\n    },\n    tabindex: {\n      type: Number\n    },\n    controls: {\n      type: Boolean,\n      default: true\n    },\n    readonly: {\n      type: Boolean\n    },\n    disabled: {\n      type: Boolean\n    },\n    autofocus: {\n      type: Boolean\n    },\n    keyboard: {\n      type: Boolean,\n      default: true\n    },\n\n    /** Parse display value to validate number */\n    parser: {\n      type: Function\n    },\n\n    /** Transform `value` to display value show in input */\n    formatter: {\n      type: Function\n    },\n\n    /** Syntactic sugar of `formatter`. Config precision of display. */\n    precision: {\n      type: Number\n    },\n\n    /** Syntactic sugar of `formatter`. Config decimal separator of display. */\n    decimalSeparator: {\n      type: String\n    },\n    onInput: {\n      type: Function\n    },\n    onChange: {\n      type: Function\n    },\n    onPressEnter: {\n      type: Function\n    },\n    onStep: {\n      type: Function\n    },\n    onBlur: {\n      type: Function\n    },\n    onFocus: {\n      type: Function\n    }\n  };\n};\nexport default defineComponent({\n  name: 'InnerInputNumber',\n  inheritAttrs: false,\n  props: _extends(_extends({}, inputNumberProps()), {\n    lazy: Boolean\n  }),\n  slots: ['upHandler', 'downHandler'],\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        slots = _ref.slots,\n        emit = _ref.emit,\n        expose = _ref.expose;\n    var inputRef = ref();\n    var focus = ref(false);\n    var userTypingRef = ref(false);\n    var compositionRef = ref(false);\n    var decimalValue = ref(getMiniDecimal(props.value));\n\n    function setUncontrolledDecimalValue(newDecimal) {\n      if (props.value === undefined) {\n        decimalValue.value = newDecimal;\n      }\n    } // ====================== Parser & Formatter ======================\n\n    /**\n     * `precision` is used for formatter & onChange.\n     * It will auto generate by `value` & `step`.\n     * But it will not block user typing.\n     *\n     * Note: Auto generate `precision` is used for legacy logic.\n     * We should remove this since we already support high precision with BigInt.\n     *\n     * @param number  Provide which number should calculate precision\n     * @param userTyping  Change by user typing\n     */\n\n\n    var getPrecision = function getPrecision(numStr, userTyping) {\n      if (userTyping) {\n        return undefined;\n      }\n\n      if (props.precision >= 0) {\n        return props.precision;\n      }\n\n      return Math.max(getNumberPrecision(numStr), getNumberPrecision(props.step));\n    }; // >>> Parser\n\n\n    var mergedParser = function mergedParser(num) {\n      var numStr = String(num);\n\n      if (props.parser) {\n        return props.parser(numStr);\n      }\n\n      var parsedStr = numStr;\n\n      if (props.decimalSeparator) {\n        parsedStr = parsedStr.replace(props.decimalSeparator, '.');\n      } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n      return parsedStr.replace(/[^\\w.-]+/g, '');\n    }; // >>> Formatter\n\n\n    var inputValue = ref('');\n\n    var mergedFormatter = function mergedFormatter(number, userTyping) {\n      if (props.formatter) {\n        return props.formatter(number, {\n          userTyping: userTyping,\n          input: String(inputValue.value)\n        });\n      }\n\n      var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n      if (!userTyping) {\n        var mergedPrecision = getPrecision(str, userTyping);\n\n        if (validateNumber(str) && (props.decimalSeparator || mergedPrecision >= 0)) {\n          // Separator\n          var separatorStr = props.decimalSeparator || '.';\n          str = toFixed(str, separatorStr, mergedPrecision);\n        }\n      }\n\n      return str;\n    }; // ========================== InputValue ==========================\n\n    /**\n     * Input text value control\n     *\n     * User can not update input content directly. It update with follow rules by priority:\n     *  1. controlled `value` changed\n     *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n     *  2. User typing with format (not precision)\n     *  3. Blur or Enter trigger revalidate\n     */\n\n\n    var initValue = function () {\n      var initValue = props.value;\n\n      if (decimalValue.value.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n        return Number.isNaN(initValue) ? '' : initValue;\n      }\n\n      return mergedFormatter(decimalValue.value.toString(), false);\n    }();\n\n    inputValue.value = initValue; // Should always be string\n\n    function setInputValue(newValue, userTyping) {\n      inputValue.value = mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n      // Otherwise is controlled by internal interactive logic which check by userTyping\n      // You can ref 'show limited value when input is not focused' test for more info.\n      newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping);\n    } // >>> Max & Min limit\n\n\n    var maxDecimal = computed(function () {\n      return getDecimalIfValidate(props.max);\n    });\n    var minDecimal = computed(function () {\n      return getDecimalIfValidate(props.min);\n    });\n    var upDisabled = computed(function () {\n      if (!maxDecimal.value || !decimalValue.value || decimalValue.value.isInvalidate()) {\n        return false;\n      }\n\n      return maxDecimal.value.lessEquals(decimalValue.value);\n    });\n    var downDisabled = computed(function () {\n      if (!minDecimal.value || !decimalValue.value || decimalValue.value.isInvalidate()) {\n        return false;\n      }\n\n      return decimalValue.value.lessEquals(minDecimal.value);\n    }); // Cursor controller\n\n    var _useCursor = useCursor(inputRef, focus),\n        _useCursor2 = _slicedToArray(_useCursor, 2),\n        recordCursor = _useCursor2[0],\n        restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n    /**\n     * Find target value closet within range.\n     * e.g. [11, 28]:\n     *    3  => 11\n     *    23 => 23\n     *    99 => 28\n     */\n\n\n    var getRangeValue = function getRangeValue(target) {\n      // target > max\n      if (maxDecimal.value && !target.lessEquals(maxDecimal.value)) {\n        return maxDecimal.value;\n      } // target < min\n\n\n      if (minDecimal.value && !minDecimal.value.lessEquals(target)) {\n        return minDecimal.value;\n      }\n\n      return null;\n    };\n    /**\n     * Check value is in [min, max] range\n     */\n\n\n    var isInRange = function isInRange(target) {\n      return !getRangeValue(target);\n    };\n    /**\n     * Trigger `onChange` if value validated and not equals of origin.\n     * Return the value that re-align in range.\n     */\n\n\n    var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n      var _a;\n\n      var updateValue = newValue;\n      var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n      // We just trigger onChange(null)\n      // This should not block user typing\n\n      if (!updateValue.isEmpty() && !userTyping) {\n        // Revert value in range if needed\n        updateValue = getRangeValue(updateValue) || updateValue;\n        isRangeValidate = true;\n      }\n\n      if (!props.readonly && !props.disabled && isRangeValidate) {\n        var numStr = updateValue.toString();\n        var mergedPrecision = getPrecision(numStr, userTyping);\n\n        if (mergedPrecision >= 0) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n        } // Trigger event\n\n\n        if (!updateValue.equals(decimalValue.value)) {\n          setUncontrolledDecimalValue(updateValue);\n          (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, updateValue.isEmpty() ? null : getDecimalValue(props.stringMode, updateValue)); // Reformat input if value is not controlled\n\n          if (props.value === undefined) {\n            setInputValue(updateValue, userTyping);\n          }\n        }\n\n        return updateValue;\n      }\n\n      return decimalValue.value;\n    }; // ========================== User Input ==========================\n\n\n    var onNextPromise = useFrame(); // >>> Collect input value\n\n    var collectInputValue = function collectInputValue(inputStr) {\n      var _a;\n\n      recordCursor(); // Update inputValue incase input can not parse as number\n\n      inputValue.value = inputStr; // Parse number\n\n      if (!compositionRef.value) {\n        var finalValue = mergedParser(inputStr);\n        var finalDecimal = getMiniDecimal(finalValue);\n\n        if (!finalDecimal.isNaN()) {\n          triggerValueUpdate(finalDecimal, true);\n        }\n      } // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n\n      (_a = props.onInput) === null || _a === void 0 ? void 0 : _a.call(props, inputStr); // optimize for chinese input experience\n      // https://github.com/ant-design/ant-design/issues/8196\n\n      onNextPromise(function () {\n        var nextInputStr = inputStr;\n\n        if (!props.parser) {\n          nextInputStr = inputStr.replace(/。/g, '.');\n        }\n\n        if (nextInputStr !== inputStr) {\n          collectInputValue(nextInputStr);\n        }\n      });\n    }; // >>> Composition\n\n\n    var onCompositionStart = function onCompositionStart() {\n      compositionRef.value = true;\n    };\n\n    var onCompositionEnd = function onCompositionEnd() {\n      compositionRef.value = false;\n      collectInputValue(inputRef.value.value);\n    }; // >>> Input\n\n\n    var onInternalInput = function onInternalInput(e) {\n      collectInputValue(e.target.value);\n    }; // ============================= Step =============================\n\n\n    var onInternalStep = function onInternalStep(up) {\n      var _a, _b; // Ignore step since out of range\n\n\n      if (up && upDisabled.value || !up && downDisabled.value) {\n        return;\n      } // Clear typing status since it may caused by up & down key.\n      // We should sync with input value.\n\n\n      userTypingRef.value = false;\n      var stepDecimal = getMiniDecimal(props.step);\n\n      if (!up) {\n        stepDecimal = stepDecimal.negate();\n      }\n\n      var target = (decimalValue.value || getMiniDecimal(0)).add(stepDecimal.toString());\n      var updatedValue = triggerValueUpdate(target, false);\n      (_a = props.onStep) === null || _a === void 0 ? void 0 : _a.call(props, getDecimalValue(props.stringMode, updatedValue), {\n        offset: props.step,\n        type: up ? 'up' : 'down'\n      });\n      (_b = inputRef.value) === null || _b === void 0 ? void 0 : _b.focus();\n    }; // ============================ Flush =============================\n\n    /**\n     * Flush current input content to trigger value change & re-formatter input if needed\n     */\n\n\n    var flushInputValue = function flushInputValue(userTyping) {\n      var parsedValue = getMiniDecimal(mergedParser(inputValue.value));\n      var formatValue = parsedValue;\n\n      if (!parsedValue.isNaN()) {\n        // Only validate value or empty value can be re-fill to inputValue\n        // Reassign the formatValue within ranged of trigger control\n        formatValue = triggerValueUpdate(parsedValue, userTyping);\n      } else {\n        formatValue = decimalValue.value;\n      }\n\n      if (props.value !== undefined) {\n        // Reset back with controlled value first\n        setInputValue(decimalValue.value, false);\n      } else if (!formatValue.isNaN()) {\n        // Reset input back since no validate value\n        setInputValue(formatValue, false);\n      }\n    };\n\n    var onKeyDown = function onKeyDown(event) {\n      var _a;\n\n      var which = event.which;\n      userTypingRef.value = true;\n\n      if (which === KeyCode.ENTER) {\n        if (!compositionRef.value) {\n          userTypingRef.value = false;\n        }\n\n        flushInputValue(false);\n        (_a = props.onPressEnter) === null || _a === void 0 ? void 0 : _a.call(props, event);\n      }\n\n      if (props.keyboard === false) {\n        return;\n      } // Do step\n\n\n      if (!compositionRef.value && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n        onInternalStep(KeyCode.UP === which);\n        event.preventDefault();\n      }\n    };\n\n    var onKeyUp = function onKeyUp() {\n      userTypingRef.value = false;\n    }; // >>> Focus & Blur\n\n\n    var onBlur = function onBlur(e) {\n      flushInputValue(false);\n      focus.value = false;\n      userTypingRef.value = false;\n      emit('blur', e);\n    }; // ========================== Controlled ==========================\n    // Input by precision\n\n\n    watch(function () {\n      return props.precision;\n    }, function () {\n      if (!decimalValue.value.isInvalidate()) {\n        setInputValue(decimalValue.value, false);\n      }\n    }, {\n      flush: 'post'\n    }); // Input by value\n\n    watch(function () {\n      return props.value;\n    }, function () {\n      var newValue = getMiniDecimal(props.value);\n      decimalValue.value = newValue;\n      var currentParsedValue = getMiniDecimal(mergedParser(inputValue.value)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n      // But let it go if user set `formatter`\n\n      if (!newValue.equals(currentParsedValue) || !userTypingRef.value || props.formatter) {\n        // Update value as effect\n        setInputValue(newValue, userTypingRef.value);\n      }\n    }, {\n      flush: 'post'\n    }); // ============================ Cursor ============================\n\n    watch(inputValue, function () {\n      if (props.formatter) {\n        restoreCursor();\n      }\n    }, {\n      flush: 'post'\n    });\n    watch(function () {\n      return props.disabled;\n    }, function (val) {\n      if (val) {\n        focus.value = false;\n      }\n    });\n    expose({\n      focus: function focus() {\n        var _a;\n\n        (_a = inputRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: function blur() {\n        var _a;\n\n        (_a = inputRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    });\n    return function () {\n      var _classNames;\n\n      var _a = _extends(_extends({}, attrs), props),\n          _a$prefixCls = _a.prefixCls,\n          prefixCls = _a$prefixCls === void 0 ? 'rc-input-number' : _a$prefixCls,\n          min = _a.min,\n          max = _a.max,\n          _a$step = _a.step,\n          step = _a$step === void 0 ? 1 : _a$step,\n          defaultValue = _a.defaultValue,\n          value = _a.value,\n          disabled = _a.disabled,\n          readonly = _a.readonly,\n          keyboard = _a.keyboard,\n          _a$controls = _a.controls,\n          controls = _a$controls === void 0 ? true : _a$controls,\n          autofocus = _a.autofocus,\n          stringMode = _a.stringMode,\n          parser = _a.parser,\n          formatter = _a.formatter,\n          precision = _a.precision,\n          decimalSeparator = _a.decimalSeparator,\n          onChange = _a.onChange,\n          onInput = _a.onInput,\n          onPressEnter = _a.onPressEnter,\n          onStep = _a.onStep,\n          lazy = _a.lazy,\n          className = _a.class,\n          style = _a.style,\n          inputProps = __rest(_a, [\"prefixCls\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readonly\", \"keyboard\", \"controls\", \"autofocus\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\", \"lazy\", \"class\", \"style\"]);\n\n      var upHandler = slots.upHandler,\n          downHandler = slots.downHandler;\n      var inputClassName = \"\".concat(prefixCls, \"-input\");\n      var eventProps = {};\n\n      if (lazy) {\n        eventProps.onChange = onInternalInput;\n      } else {\n        eventProps.onInput = onInternalInput;\n      }\n\n      return _createVNode(\"div\", {\n        \"class\": classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus.value), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readonly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.value.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.value.isInvalidate() && !isInRange(decimalValue.value)), _classNames)),\n        \"style\": style,\n        \"onKeydown\": onKeyDown,\n        \"onKeyup\": onKeyUp\n      }, [controls && _createVNode(StepHandler, {\n        \"prefixCls\": prefixCls,\n        \"upDisabled\": upDisabled.value,\n        \"downDisabled\": downDisabled.value,\n        \"onStep\": onInternalStep\n      }, {\n        upNode: upHandler,\n        downNode: downHandler\n      }), _createVNode(\"div\", {\n        \"class\": \"\".concat(inputClassName, \"-wrap\")\n      }, [_createVNode(\"input\", _objectSpread(_objectSpread(_objectSpread({\n        \"autofocus\": autofocus,\n        \"autocomplete\": \"off\",\n        \"role\": \"spinbutton\",\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": decimalValue.value.isInvalidate() ? null : decimalValue.value.toString(),\n        \"step\": step\n      }, inputProps), {}, {\n        \"ref\": inputRef,\n        \"class\": inputClassName,\n        \"value\": inputValue.value,\n        \"disabled\": disabled,\n        \"readonly\": readonly,\n        \"onFocus\": function onFocus(e) {\n          focus.value = true;\n          emit('focus', e);\n        }\n      }, eventProps), {}, {\n        \"onBlur\": onBlur,\n        \"onCompositionstart\": onCompositionStart,\n        \"onCompositionend\": onCompositionEnd\n      }), null)])]);\n    };\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}