{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport { VALUE_SPLIT } from '../utils/commonUtil';\nimport { computed } from 'vue';\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\n\nexport default (function (options, fieldNames) {\n  var entities = computed(function () {\n    return convertDataToEntities(options.value, {\n      fieldNames: fieldNames.value,\n      initWrapper: function initWrapper(wrapper) {\n        return _extends(_extends({}, wrapper), {\n          pathKeyEntities: {}\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var pathKey = entity.nodes.map(function (node) {\n          return node[fieldNames.value.value];\n        }).join(VALUE_SPLIT);\n        wrapper.pathKeyEntities[pathKey] = entity; // Overwrite origin key.\n        // this is very hack but we need let conduct logic work with connect path\n\n        entity.key = pathKey;\n      }\n    }).pathKeyEntities;\n  });\n  return entities;\n});","map":{"version":3,"names":["_extends","convertDataToEntities","VALUE_SPLIT","computed","options","fieldNames","entities","value","initWrapper","wrapper","pathKeyEntities","processEntity","entity","pathKey","nodes","map","node","join","key"],"sources":["/Users/cinder/Desktop/psyplusweb/node_modules/ant-design-vue/es/vc-cascader/hooks/useEntities.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport { VALUE_SPLIT } from '../utils/commonUtil';\nimport { computed } from 'vue';\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\n\nexport default (function (options, fieldNames) {\n  var entities = computed(function () {\n    return convertDataToEntities(options.value, {\n      fieldNames: fieldNames.value,\n      initWrapper: function initWrapper(wrapper) {\n        return _extends(_extends({}, wrapper), {\n          pathKeyEntities: {}\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var pathKey = entity.nodes.map(function (node) {\n          return node[fieldNames.value.value];\n        }).join(VALUE_SPLIT);\n        wrapper.pathKeyEntities[pathKey] = entity; // Overwrite origin key.\n        // this is very hack but we need let conduct logic work with connect path\n\n        entity.key = pathKey;\n      }\n    }).pathKeyEntities;\n  });\n  return entities;\n});"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAT,QAAyB,KAAzB;AACA;;AAEA,gBAAgB,UAAUC,OAAV,EAAmBC,UAAnB,EAA+B;EAC7C,IAAIC,QAAQ,GAAGH,QAAQ,CAAC,YAAY;IAClC,OAAOF,qBAAqB,CAACG,OAAO,CAACG,KAAT,EAAgB;MAC1CF,UAAU,EAAEA,UAAU,CAACE,KADmB;MAE1CC,WAAW,EAAE,SAASA,WAAT,CAAqBC,OAArB,EAA8B;QACzC,OAAOT,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKS,OAAL,CAAT,EAAwB;UACrCC,eAAe,EAAE;QADoB,CAAxB,CAAf;MAGD,CANyC;MAO1CC,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+BH,OAA/B,EAAwC;QACrD,IAAII,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,UAAUC,IAAV,EAAgB;UAC7C,OAAOA,IAAI,CAACX,UAAU,CAACE,KAAX,CAAiBA,KAAlB,CAAX;QACD,CAFa,EAEXU,IAFW,CAENf,WAFM,CAAd;QAGAO,OAAO,CAACC,eAAR,CAAwBG,OAAxB,IAAmCD,MAAnC,CAJqD,CAIV;QAC3C;;QAEAA,MAAM,CAACM,GAAP,GAAaL,OAAb;MACD;IAfyC,CAAhB,CAArB,CAgBJH,eAhBH;EAiBD,CAlBsB,CAAvB;EAmBA,OAAOJ,QAAP;AACD,CArBD"},"metadata":{},"sourceType":"module"}