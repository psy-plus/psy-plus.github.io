{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { watch, shallowRef } from 'vue';\nexport default function useLazyKVMap(dataRef, childrenColumnNameRef, getRowKeyRef) {\n  var mapCacheRef = shallowRef({});\n  watch([dataRef, childrenColumnNameRef, getRowKeyRef], function () {\n    var kvMap = new Map();\n    var getRowKey = getRowKeyRef.value;\n    var childrenColumnName = childrenColumnNameRef.value;\n    /* eslint-disable no-inner-declarations */\n\n    function dig(records) {\n      records.forEach(function (record, index) {\n        var rowKey = getRowKey(record, index);\n        kvMap.set(rowKey, record);\n\n        if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n          dig(record[childrenColumnName] || []);\n        }\n      });\n    }\n    /* eslint-enable */\n\n\n    dig(dataRef.value);\n    mapCacheRef.value = {\n      kvMap: kvMap\n    };\n  }, {\n    deep: true,\n    immediate: true\n  });\n\n  function getRecordByKey(key) {\n    return mapCacheRef.value.kvMap.get(key);\n  }\n\n  return [getRecordByKey];\n}","map":{"version":3,"names":["_typeof","watch","shallowRef","useLazyKVMap","dataRef","childrenColumnNameRef","getRowKeyRef","mapCacheRef","kvMap","Map","getRowKey","value","childrenColumnName","dig","records","forEach","record","index","rowKey","set","deep","immediate","getRecordByKey","key","get"],"sources":["/Users/cinder/Desktop/Psy+/psyplusweb/node_modules/ant-design-vue/es/table/hooks/useLazyKVMap.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { watch, shallowRef } from 'vue';\nexport default function useLazyKVMap(dataRef, childrenColumnNameRef, getRowKeyRef) {\n  var mapCacheRef = shallowRef({});\n  watch([dataRef, childrenColumnNameRef, getRowKeyRef], function () {\n    var kvMap = new Map();\n    var getRowKey = getRowKeyRef.value;\n    var childrenColumnName = childrenColumnNameRef.value;\n    /* eslint-disable no-inner-declarations */\n\n    function dig(records) {\n      records.forEach(function (record, index) {\n        var rowKey = getRowKey(record, index);\n        kvMap.set(rowKey, record);\n\n        if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n          dig(record[childrenColumnName] || []);\n        }\n      });\n    }\n    /* eslint-enable */\n\n\n    dig(dataRef.value);\n    mapCacheRef.value = {\n      kvMap: kvMap\n    };\n  }, {\n    deep: true,\n    immediate: true\n  });\n\n  function getRecordByKey(key) {\n    return mapCacheRef.value.kvMap.get(key);\n  }\n\n  return [getRecordByKey];\n}"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,KAAlC;AACA,eAAe,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,qBAA/B,EAAsDC,YAAtD,EAAoE;EACjF,IAAIC,WAAW,GAAGL,UAAU,CAAC,EAAD,CAA5B;EACAD,KAAK,CAAC,CAACG,OAAD,EAAUC,qBAAV,EAAiCC,YAAjC,CAAD,EAAiD,YAAY;IAChE,IAAIE,KAAK,GAAG,IAAIC,GAAJ,EAAZ;IACA,IAAIC,SAAS,GAAGJ,YAAY,CAACK,KAA7B;IACA,IAAIC,kBAAkB,GAAGP,qBAAqB,CAACM,KAA/C;IACA;;IAEA,SAASE,GAAT,CAAaC,OAAb,EAAsB;MACpBA,OAAO,CAACC,OAAR,CAAgB,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;QACvC,IAAIC,MAAM,GAAGR,SAAS,CAACM,MAAD,EAASC,KAAT,CAAtB;QACAT,KAAK,CAACW,GAAN,CAAUD,MAAV,EAAkBF,MAAlB;;QAEA,IAAIA,MAAM,IAAIhB,OAAO,CAACgB,MAAD,CAAP,KAAoB,QAA9B,IAA0CJ,kBAAkB,IAAII,MAApE,EAA4E;UAC1EH,GAAG,CAACG,MAAM,CAACJ,kBAAD,CAAN,IAA8B,EAA/B,CAAH;QACD;MACF,CAPD;IAQD;IACD;;;IAGAC,GAAG,CAACT,OAAO,CAACO,KAAT,CAAH;IACAJ,WAAW,CAACI,KAAZ,GAAoB;MAClBH,KAAK,EAAEA;IADW,CAApB;EAGD,CAvBI,EAuBF;IACDY,IAAI,EAAE,IADL;IAEDC,SAAS,EAAE;EAFV,CAvBE,CAAL;;EA4BA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;IAC3B,OAAOhB,WAAW,CAACI,KAAZ,CAAkBH,KAAlB,CAAwBgB,GAAxB,CAA4BD,GAA5B,CAAP;EACD;;EAED,OAAO,CAACD,cAAD,CAAP;AACD"},"metadata":{},"sourceType":"module"}